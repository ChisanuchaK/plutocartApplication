-- MySQL Script generated by MySQL Workbench
-- Wed Nov 22 22:21:58 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
SET time_zone = '+07:00';
SET GLOBAL time_zone = '+07:00';

-- -----------------------------------------------------
-- Schema plutocart
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema plutocart
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `plutocart` DEFAULT CHARACTER SET utf8mb4 ;
USE `plutocart` ;

-- -----------------------------------------------------
-- Table `plutocart`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`account` (
  `id_account` INT NOT NULL AUTO_INCREMENT,
  `imei` VARCHAR(200) NOT NULL,
  `email` VARCHAR(50) NULL,
  `account_role` ENUM('Guest', 'Member') NOT NULL,
  PRIMARY KEY (`id_account`),
  UNIQUE INDEX `email_google_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plutocart`.`wallet`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`wallet` (
  `id_wallet` INT NOT NULL AUTO_INCREMENT,
  `name_wallet` VARCHAR(15) NOT NULL,
  `balance_wallet` DECIMAL(13,2) NOT NULL DEFAULT 1.00,
  `status_wallet` TINYINT NOT NULL DEFAULT 1,
  `account_id_account` INT NOT NULL,
  `create_wallet_on` DATETIME NOT NULL,
  `update_wallet_on` DATETIME NOT NULL,
  PRIMARY KEY (`id_wallet`),
  INDEX `fk_wallet_account1_idx` (`account_id_account` ASC) VISIBLE,
  CONSTRAINT `fk_wallet_account1`
    FOREIGN KEY (`account_id_account`)
    REFERENCES `plutocart`.`account` (`id_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plutocart`.`goal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`goal` (
  `id_goal` INT NOT NULL AUTO_INCREMENT,
  `name_goal` VARCHAR(45) NOT NULL,
  `total_goal` DECIMAL(13,2) NOT NULL,
  `collected_money` DECIMAL(13,2) NOT NULL DEFAULT 0.00,
  `end_date_goal` DATETIME NOT NULL,
  `status_goal` ENUM('1','2','3') NOT NULL DEFAULT 1,
  `account_id_account` INT NOT NULL,
  `create_goal_on` DATETIME NOT NULL,
  `update_goal_on` DATETIME NOT NULL,
  PRIMARY KEY (`id_goal`),
  INDEX `fk_goal_account1_idx` (`account_id_account` ASC) VISIBLE,
  CONSTRAINT `fk_goal_account1`
    FOREIGN KEY (`account_id_account`)
    REFERENCES `plutocart`.`account` (`id_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plutocart`.`transaction_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`transaction_category` (
  `id_transaction_category` INT NOT NULL AUTO_INCREMENT,
  `name_transaction_category` VARCHAR(45) NOT NULL,
  `type_category` ENUM('income', 'expense', 'goal', 'debt') NOT NULL,
  `image_icon_url` VARCHAR(200) NOT NULL,
  `color_graph` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_transaction_category`),
  UNIQUE INDEX `name_transaction_category_UNIQUE` (`name_transaction_category` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plutocart`.`debt`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`debt` (
  `id_debt` INT NOT NULL AUTO_INCREMENT,
  `name_debt` VARCHAR(45) NOT NULL,
  `total_debt` DECIMAL(13,2) NOT NULL DEFAULT 0.00,
  `total_period` INT NOT NULL DEFAULT 1,
  `paid_period` INT NOT NULL DEFAULT 0,
  `monthly_payment`INT NOT NULL,
  `debt_paid` DECIMAL(13,2) NOT NULL DEFAULT 0.00,
  `money_lender` VARCHAR(15) NOT NULL,
  `status_debt` ENUM('1','2','3') NOT NULL DEFAULT 1,
  `latest_pay_date` DATETIME DEFAULT NULL,
  `create_debt_on` DATETIME NOT NULL,
  `update_debt_on` DATETIME NOT NULL,
  `account_id_account` INT NOT NULL,
  PRIMARY KEY (`id_debt`),
  INDEX `fk_debt_account1_idx` (`account_id_account` ASC) VISIBLE,
  CONSTRAINT `fk_debt_account1`
    FOREIGN KEY (`account_id_account`)
    REFERENCES `plutocart`.`account` (`id_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plutocart`.`transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`transaction` (
  `id_transaction` INT NOT NULL AUTO_INCREMENT,
  `stm_transaction` DECIMAL(13,2) NOT NULL DEFAULT 0.00,
  `statement_type` ENUM('income', 'expense') NOT NULL,
  `date_transaction` DATETIME NOT NULL,
  `tran_category_id_category` INT NOT NULL,
  `description` VARCHAR(100) NULL DEFAULT NULL,
  `image_url` VARCHAR(200) NULL DEFAULT NULL,
  `debt_id_debt` INT NULL,
  `goal_id_goal` INT NULL,
  `create_transaction_on` DATETIME NOT NULL,
  `update_transaction_on` DATETIME NOT NULL,
  `wallet_id_wallet` INT NOT NULL,
  PRIMARY KEY (`id_transaction`),
  INDEX `fk_transaction_debt1_idx` (`debt_id_debt` ASC) VISIBLE,
  INDEX `fk_transaction_category1_idx` (`tran_category_id_category` ASC) VISIBLE,
  INDEX `fk_transaction_goal1_idx` (`goal_id_goal` ASC) VISIBLE,
  INDEX `fk_transaction_wallet1_idx` (`wallet_id_wallet` ASC) VISIBLE,
  CONSTRAINT `fk_transaction_debt1`
    FOREIGN KEY (`debt_id_debt`)
    REFERENCES `plutocart`.`debt` (`id_debt`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_category1`
    FOREIGN KEY (`tran_category_id_category`)
    REFERENCES `plutocart`.`transaction_category` (`id_transaction_category`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_goal1`
    FOREIGN KEY (`goal_id_goal`)
    REFERENCES `plutocart`.`goal` (`id_goal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_wallet1`
    FOREIGN KEY (`wallet_id_wallet`)
    REFERENCES `plutocart`.`wallet` (`id_wallet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `plutocart`.`graph`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plutocart`.`graph` (
  `id_graph` INT NOT NULL AUTO_INCREMENT,
  `total_in_graph` DECIMAL(13,2) NULL,
  `tran_category_id_category` INT NOT NULL,
  `account_id_account` INT NOT NULL,
  PRIMARY KEY (`id_graph`, `tran_category_id_category`, `account_id_account`),
  CONSTRAINT `fk_transaction_category_has_account_transaction_category`
    FOREIGN KEY (`tran_category_id_category`)
    REFERENCES `plutocart`.`transaction_category` (`id_transaction_category`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_category_has_account_account1`
    FOREIGN KEY (`account_id_account`)
    REFERENCES `plutocart`.`account` (`id_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_transaction_category_has_account_account1_idx` ON `plutocart`.`graph` (`account_id_account` ASC) VISIBLE;

CREATE INDEX `fk_transaction_category_has_account_transaction_category_idx` ON `plutocart`.`graph` (`tran_category_id_category` ASC) VISIBLE;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


insert into account (id_account  , imei , email  , account_role) values(1 , 'admin_imei' , 'admin@gmail.com'  , 2);

insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(1 , 'Salary' , 1 , 'https://res.cloudinary.com/dtczkwnwt/image/upload/v1700856731/category_images/Icon-%E0%B9%80%E0%B8%87%E0%B8%B4%E0%B8%99%E0%B9%80%E0%B8%94%E0%B8%B7%E0%B8%AD%E0%B8%99.png' , '0XFF277DA1' ); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(2 , 'Pocket money' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700856997/category_images/Icon-%E0%B8%84%E0%B9%88%E0%B8%B2%E0%B8%82%E0%B8%99%E0%B8%A1.png" , '0XFF43AA8B');
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(3 , 'Davidend' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700856978/category_images/Icon-%E0%B8%A5%E0%B8%87%E0%B8%97%E0%B8%B8%E0%B8%99.png" , '0XFF4D908E'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(4 , 'Allowance' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857421/category_images/Icon-Allowance.png" , '0XFF577590'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(5 , 'Pension' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857447/category_images/Icon-Pension.png" , '0XFF90BE6D'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(6 , 'Reward' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857460/category_images/Icon-Reward.png" , '0XFFF3722C'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(7 , 'Bonus' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857474/category_images/Icon-Bonus.png" , '0XFFF8961E'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(8 , 'Collect rent' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857502/category_images/Icon-Collect_rent.png" , '0XFFF94144'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(9 , 'Win the lottery' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857526/category_images/Icon-Win_Lottery.png" , '0XFFF9844A'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(10 , 'Freelance' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857547/category_images/Icon-Part_time.png" , '0XFFF9C74F'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(11 , 'Part-time' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857564/category_images/Icon-Freelance.png" , '0XFF15616D'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(12, 'Sell Things' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857574/category_images/Icon-Sell_things.png" , '0XFF1A9CB0'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(13, 'Red envelope' , 1 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857581/category_images/Icon-%E0%B8%AD%E0%B8%B1%E0%B9%88%E0%B8%87%E0%B9%80%E0%B8%9B%E0%B8%B2.png" , '0XFFEF476F'); 

insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(14 , 'Food' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857873/category_images/Icon-eat.png" , '0XFF277DA1'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(15, 'Gasoline' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857881/category_images/Icon-Gasoline.png" , '0XFF43AA8B'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(16, 'Phone bill' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857895/category_images/Icon-Telephone%20bill.png" , '0XFF4D908E'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(17, 'Medical' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857943/category_images/Icon-Medical.png" , '0XFF577590'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(18, 'Shopping' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857954/category_images/Icon-Shopping.png" , '0XFF90BE6D'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(19, 'Electric bill' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857970/category_images/Icon-Electric.png" , '0XFFF3722C'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(20, 'Water bill' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857986/category_images/Icon-water.png" , '0XFFF8961E'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(21, 'Home loans' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700857998/category_images/Icon-home.png" , '0XFFF94144'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(22, 'Travel' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858007/category_images/Icon-Travel.png" , '0XFFF9C74F'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(23, 'Fare' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858038/category_images/Icon-fare.png" , '0XFF15616D'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(24, 'Drinking' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858050/category_images/Icon-Drink.png" , '0XFF1A9CB0'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(25, 'Donate' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858062/category_images/Icon-Donate.png" , '0XFFEF476F'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(26, 'Home items' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858086/category_images/Icon-Home_items.png" , '0XFF9381FF'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(27, 'Pay for rent' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858104/category_images/Icon-Rent.png" , '0XFF2EC4B6'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(28, 'Transfer' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700858112/category_images/Icon-Transfer_money.png" , '0XFF118AB2'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(29, 'Lottery' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1700930017/test/Icon-Lottery.png" , '0XFFFF9F1C'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(30, 'Home Internet' , 2 , "https://res.cloudinary.com/dtczkwnwt/image/upload/v1704136130/category_images/Icon-Home-internet_f3529089-88e2-481b-9d0a-394e62c2ce3a.png" , '0XFFE71D36'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(31, 'Education' , 2 ,"https://res.cloudinary.com/dtczkwnwt/image/upload/v1704136306/category_images/Icon-Education_75061b18-9f27-48a6-9cd9-22d249638bef.png" , '0XFFffafcc'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(32, 'Goals' , 2 ,"https://res.cloudinary.com/dtczkwnwt/image/upload/v1706441684/category_images/Goals_76349a46-07b8-4024-97f5-9eb118aa533d.png" , '0XFFfb6f92'); 
insert into transaction_category (id_transaction_category , name_transaction_category , type_category , image_icon_url , color_graph) values(33, 'Debts' , 2 ,"https://res.cloudinary.com/dtczkwnwt/image/upload/v1706441750/category_images/Debts_89cb0a76-a6c2-49c6-8ff3-e4a70555330d.png" , '0XFF9c89b8'); 
 
insert into wallet (id_wallet , name_wallet , balance_wallet , status_wallet , account_id_account , create_wallet_on , update_wallet_on) values(1 , 'admin wallet' , 100000.00 , default , 1 , now() , now());
insert into wallet (id_wallet , name_wallet , balance_wallet , status_wallet , account_id_account , create_wallet_on , update_wallet_on) values(2 , 'admin wallet' , 999999.00 , default , 1 , now() , now());
insert into wallet (id_wallet , name_wallet , balance_wallet , status_wallet , account_id_account , create_wallet_on , update_wallet_on) values(3 , 'admin 🥲🐇' , 1111111.00 , default , 1 , now() , now());


-- insert into goal values(1,"goal 1",10000.00,2000.00,"2024-08-01 00:00:00",1,1,now(),now());

-- insert into debt values(1,"debt 1",20000.00,10,1,2000.00, 2000.00,"test debt 01",1,now(),now(),now(),1);

-- insert into transaction values(1,1000,1,now(),1,"this is first transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(2,1000,1,now(),2,"this is second transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(3,1000,1,now(),3,"this is third transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(4,1000,1,now(),4,"this is fourth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(5,1000,1,now(),5,"this is fifth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(6,1000,1,now(),6,"this is sixth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(7,1000,1,now(),7,"this is seventh transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(8,1000,1,now(),8,"this is eighth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(9,1000,1,now(),9,"this is ninth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(10,1000,1,now(),10,"this is tenth transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(11,1000,1,now(),11,"this is 11 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(12,1000,1,now(),12,"this is 12 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(13,1000,1,now(),13,"this is 13 transaction. ", null,null,null,now(),now(),1);

-- insert into transaction values(14,1000,2,now(),14,"this is 14 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(15,1000,2,now(),15,"this is 15 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(16,1000,2,now(),16,"this is 16 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(17,1000,2,now(),17,"this is 17 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(18,1000,2,now(),18,"this is 18 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(19,1000,2,now(),19,"this is 19 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(20,1000,2,now(),20,"this is 20 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(21,1000,2,now(),21,"this is 21 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(22,1000,2,now(),22,"this is 22 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(23,1000,2,now(),23,"this is 23 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(24,1000,2,now(),24,"this is 24 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(25,1000,2,now(),25,"this is 25 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(26,1000,2,now(),26,"this is 26 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(27,1000,2,now(),27,"this is 27 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(28,1000,2,now(),28,"this is 28 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(29,1000,2,now(),29,"this is 29 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(30,1000,2,now(),30,"this is 30 transaction. ", null,null,null,now(),now(),1);
-- insert into transaction values(31,1000,2,now(),31,"this is 31 transaction. ", null,null,null,now(),now(),1);

-- insert into transaction values(32,1000,2,now(),32,"this is 32 transaction. ", null,null,1,now(),now(),1);
-- insert into transaction values(33,1000,2,now(),33,"this is 33 transaction. ", null,1,null,now(),now(),1);

DELIMITER //

CREATE PROCEDURE InsertIntoWallet( in walletName varchar(15) , in balanceWallet decimal(13 ,2) ,  in accountId int)
BEGIN
    DECLARE account_count INT;
    SELECT COUNT(*) into account_count  FROM wallet WHERE account_id_account = accountId;
    IF account_count <6 THEN
        INSERT INTO wallet ( name_wallet, balance_wallet, status_wallet, account_id_account, create_wallet_on, update_wallet_on)
        VALUES ( walletName, balanceWallet, default, accountId, NOW(), NOW());
	 ELSE
        SELECT 'Maximum wallet limit reached for this account.' AS status;
    END IF;
    
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteWalletBYWalletId( in accountId int , in walletId int)
BEGIN
   DELETE FROM wallet where id_wallet = walletId and account_id_account = accountId;

END //
DELIMITER ;

-- DELIMITER //
-- CREATE PROCEDURE deleteAccountAllF( in accountId int , in walletId int)

-- BEGIN
--     DELETE FROM wallet where  account_id_account = accountId;
-- 	DELETE FROM debt WHERE account_id_account = accountId;
-- 	DELETE FROM goal WHERE account_id_account = accountId;
--   DECLARE debt_count INT;
--  DECLARE goal_count INT;
-- 	DELETE from transaction where wallet_id_wallet = walletId;
--     SELECT COUNT(*) into debt_count  FROM debt WHERE account_id_account = accountId;
--     SELECT COUNT(*) into goal_count  FROM goal WHERE account_id_account = accountId;
--     if debt_count > 0 THEN 
--         DELETE FROM debt WHERE account_id_account = accountId;
--         END IF;
--     if goal_count > 0 THEN
--          DELETE FROM goal WHERE account_id_account = accountId;
--          END IF;
--    DELETE FROM wallet where id_wallet = walletId and account_id_account = accountId;

-- END //
-- DELIMITER ;

-- view transaction by account id 
DELIMITER //
CREATE PROCEDURE viewTransactionByAccountId(in accountId int)
BEGIN
	select t.* from transaction t join wallet w on
    t.wallet_id_wallet = w.id_wallet where w.account_id_account = accountId
    order by t.date_transaction desc;
END //
DELIMITER ;

-- view transaction by debt id order by update date desc
DELIMITER //
CREATE PROCEDURE viewTransactionByDebtIdDesc(in debtId int)
BEGIN
	select t.* from transaction t
    where t.debt_id_debt = debtId 
    order by t.update_transaction_on desc;
END //
DELIMITER ;

-- view transaction by account id & wallet id
DELIMITER //
CREATE PROCEDURE viewTransactionByAccountIdAndWalletId(
	in accountId int,
	in walletId int  )
BEGIN
	select t.* from transaction t join wallet w on
    t.wallet_id_wallet = w.id_wallet where t.wallet_id_wallet = walletId and w.account_id_account = accountId;
END //
DELIMITER ;

-- view transaction by account id & wallet id & transaction id
DELIMITER //
CREATE PROCEDURE viewTransactionByAccountIdAndWalletIdAndTransactionId(
	in accountId int,
	in walletId int,
    in transactionId int)
BEGIN
	select t.* from transaction t join wallet w on
    t.wallet_id_wallet = w.id_wallet where t.id_transaction = transactionId and t.wallet_id_wallet = walletId and w.account_id_account = accountId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE viewTransactionByFilter(
    IN p_account_id INT,
    IN p_walletId INT,
    IN p_month INT,
    IN p_year INT
)
BEGIN
    SELECT *
    FROM transaction t 
    JOIN wallet w ON t.wallet_id_wallet = w.id_wallet
    WHERE w.account_id_account = p_account_id
    AND (
		(p_year IS NULL OR YEAR(date_transaction) = p_year)
	AND (p_month IS NULL OR MONTH(date_transaction) = p_month)
	AND (p_walletId IS NULL OR wallet_id_wallet = p_walletId)
    );
END//
DELIMITER ;

-- create transaction 
DELIMITER //
CREATE PROCEDURE InsertIntoTransactionByWalletId(
    IN accountId INT,
    IN walletId INT,
    IN stmTransaction DECIMAL(10, 2),
    IN statementType INT,
    IN dateTransaction DATETIME,
    IN tranCategoryIdCategory INT,
    IN descriptionOfT VARCHAR(100),
    IN imageUrl VARCHAR(200),
    IN debtIdDebt INT,
    IN goalIdGoal INT
)
BEGIN
    DECLARE createTransactionOn DATETIME;
    DECLARE updateTransactionOn DATETIME;
    DECLARE balanceAdjustment DECIMAL(10, 2);

    SET createTransactionOn = NOW();
    SET updateTransactionOn = NOW();

    -- Determine the balance adjustment based on the statement type
    IF statementType = 1 THEN
        SET balanceAdjustment = stmTransaction;  -- Income
    ELSEIF statementType = 2 THEN
        SET balanceAdjustment = -stmTransaction; -- Expense
    ELSE
        -- Handle other statement types if needed
        SET balanceAdjustment = 0;
    END IF;

    -- Insert into the transaction table
    INSERT INTO transaction (
        stm_transaction,
        statement_type,
        date_transaction,
        tran_category_id_category,
        description,
        image_url,
        debt_id_debt,
        goal_id_goal,
        create_transaction_on,
        update_transaction_on,
        wallet_id_wallet
    ) VALUES (
        stmTransaction,
        statementType,
        dateTransaction,
        tranCategoryIdCategory,
        descriptionOfT,
        imageUrl,
        debtIdDebt,
        goalIdGoal,
        createTransactionOn,
        updateTransactionOn,
        walletId
    );

    -- Update the balance_wallet in the wallet table
    UPDATE wallet
    SET balance_wallet = balance_wallet + balanceAdjustment
    WHERE id_wallet = walletId;
    
    -- Update graph table
    IF NOT EXISTS (
        SELECT 1 FROM graph WHERE account_id_account = accountId AND tran_category_id_category = tranCategoryIdCategory
    ) THEN
        -- Insert new record into graph table
        INSERT INTO graph (total_in_graph, tran_category_id_category, account_id_account)
        VALUES (stmTransaction, tranCategoryIdCategory, accountId);
    ELSE
        -- Update existing record in graph table
        UPDATE graph
        SET total_in_graph = total_in_graph + stmTransaction
        WHERE account_id_account = accountId AND tran_category_id_category = tranCategoryIdCategory;
    END IF;

    -- Handle goal and debt updates
    IF goalIdGoal IS NOT NULL THEN
        -- Update goal table
        UPDATE goal
        SET collected_money = collected_money + stmTransaction,
            status_goal = CASE
                WHEN collected_money < total_goal THEN 1
                ELSE 2
            END
        WHERE id_goal = goalIdGoal;
    END IF;
    
    IF debtIdDebt IS NOT NULL THEN
        -- Update debt table
        UPDATE debt
        SET debt_paid = debt_paid + stmTransaction,
            paid_period = paid_period + 1,
            latest_pay_date = createTransactionOn,
            status_debt = CASE
                WHEN debt_paid < total_debt THEN 1
                ELSE 2
            END
        WHERE id_debt = debtIdDebt;
    END IF;
END //

DELIMITER ;

-- delete transaction
DELIMITER //
CREATE PROCEDURE deleteTransactionByTransactionId(
    IN accountId INT,
    IN transactionId INT,
    IN stmTransaction DECIMAL(10, 2),
    IN stmType VARCHAR(10),
    IN walletId INT,
    IN goalIdGoal INT,
    IN debtIdDebt INT,
    IN transactionDate DATETIME
)
BEGIN
    DECLARE balanceAdjustment DECIMAL(10, 2);
	DECLARE tranCategoryIdCategory INT;

    -- Retrieve tran_category_id_category from transaction table using transactionId
    SELECT tran_category_id_category INTO tranCategoryIdCategory FROM transaction WHERE id_transaction = transactionId;
    
    -- Delete the transaction by transactionId
    DELETE FROM transaction WHERE id_transaction = transactionId;

    -- Determine the balance adjustment based on the statement type
    IF stmType = 'income' THEN
        SET balanceAdjustment = -stmTransaction;  -- Invert for income
    ELSEIF stmType = 'expense' THEN
        SET balanceAdjustment = stmTransaction;   -- Keep as is for expense
    ELSE
        -- Handle other statement types if needed
        SET balanceAdjustment = 0;
    END IF;

    -- Update the balance_wallet in the wallet table
    UPDATE wallet
    SET balance_wallet = balance_wallet + balanceAdjustment
    WHERE id_wallet = walletId;

    -- Update graph table
    UPDATE graph
    SET total_in_graph = total_in_graph - stmTransaction
    WHERE account_id_account = accountId AND tran_category_id_category = tranCategoryIdCategory;

    -- Check if any transaction exists for the given category and account
    IF (SELECT count(*) FROM transaction t JOIN wallet w ON t.wallet_id_wallet = w.id_wallet 
		WHERE w.account_id_account = accountId AND t.tran_category_id_category = tranCategoryIdCategory) = 0 THEN
        -- Delete graph record if no transactions exist
        DELETE FROM graph WHERE account_id_account = accountId AND tran_category_id_category = tranCategoryIdCategory;
    END IF;

    -- Handle goal and debt updates
    IF goalIdGoal IS NOT NULL THEN
        -- Update goal table
        UPDATE goal
        SET collected_money = collected_money - stmTransaction,
            status_goal = CASE
                WHEN collected_money < total_goal THEN 1
                ELSE 2
            END
        WHERE id_goal = goalIdGoal;
    END IF;

    IF debtIdDebt IS NOT NULL THEN
        -- Update debt table
        UPDATE debt
        SET debt_paid = CASE
                            WHEN stmTransaction < debt_paid THEN debt_paid - stmTransaction
                            ELSE 0
                        END,
            paid_period = CASE
                                WHEN paid_period > 0 THEN paid_period - 1
                                ELSE paid_period
                            END,
            latest_pay_date = transactionDate,
            status_debt = CASE
                WHEN debt_paid < total_debt THEN 1
                ELSE 2
            END
        WHERE id_debt = debtIdDebt;
    END IF;
END //

DELIMITER ;

-- update transaction
DELIMITER //
CREATE PROCEDURE UpdateTransaction(
    IN accountId INT,
    IN walletId INT,
    IN transactionId INT,
    IN stmTransaction DECIMAL(10, 2),
    IN statementType INT,
    IN dateTransaction DATETIME,
    IN tranCategoryIdCategory INT,
    IN description VARCHAR(100),
    IN imageUrl VARCHAR(200),
    IN debtIdDebt INT,
    IN goalIdGoal INT
)
BEGIN
    DECLARE oldStmTransaction DECIMAL(10, 2);
    DECLARE currentBalance DECIMAL(10, 2);
    DECLARE newBalance DECIMAL(10, 2);
    DECLARE oldStmType INT;
    DECLARE updateTransactionOn DATETIME;
    DECLARE oldWalId INT;
    DECLARE oldTranCatId INT;

    SET updateTransactionOn = NOW();

    -- Get the old stmTransaction value, statementType, and tranCategoryIdCategory
    SELECT stm_transaction, statement_type, wallet_id_wallet, tran_category_id_category
    INTO oldStmTransaction, oldStmType, oldWalId, oldTranCatId
    FROM transaction
    WHERE id_transaction = transactionId;

    -- Get the current balance
    SELECT balance_wallet INTO currentBalance
    FROM wallet
    WHERE id_wallet = oldWalId;

    -- Update the wallet table based on statementType
    IF oldStmType = 1 THEN
        -- Subtract the old stmTransaction for statementType = 1
        UPDATE wallet
        SET balance_wallet = balance_wallet - oldStmTransaction
        WHERE id_wallet = oldWalId;
    ELSEIF oldStmType = 2 THEN
        -- Add the old stmTransaction for statementType = 2
        UPDATE wallet
        SET balance_wallet = balance_wallet + oldStmTransaction
        WHERE id_wallet = oldWalId;
    END IF;
    
    -- Update graph field
    UPDATE graph
    SET total_in_graph = total_in_graph - oldStmTransaction
    WHERE tran_category_id_category = oldTranCatId AND account_id_account = accountId;
    
	IF goalIdGoal IS NOT NULL THEN
        UPDATE goal
		SET collected_money = collected_money - oldStmTransaction
		WHERE id_goal = goalIdGoal;
	END IF;
    
	IF debtIdDebt IS NOT NULL THEN
        UPDATE debt
		SET debt_paid = debt_paid - oldStmTransaction
		WHERE id_debt = debtIdDebt;
	END IF;

    -- Update the transaction table
    UPDATE transaction
    SET
        stm_transaction = stmTransaction,
        statement_type = statementType,
        date_transaction = dateTransaction,
        tran_category_id_category = tranCategoryIdCategory,
        description = description,
        image_url = imageUrl,
        debt_id_debt = debtIdDebt,
        goal_id_goal = goalIdGoal,
        update_transaction_on = updateTransactionOn,
        wallet_id_wallet = walletId
    WHERE id_transaction = transactionId;

    -- Calculate new balance based on statementType
    IF statementType = 1 THEN
        SET newBalance = stmTransaction;
    ELSEIF statementType = 2 THEN
        SET newBalance = -stmTransaction;
    END IF;

    -- Update the wallet table with the new balance
    UPDATE wallet
    SET balance_wallet = balance_wallet + newBalance
    WHERE id_wallet = walletId;

    -- Update graph with new total
    IF EXISTS (SELECT * FROM graph WHERE tran_category_id_category = tranCategoryIdCategory AND account_id_account = accountId) THEN
        UPDATE graph
        SET total_in_graph = total_in_graph + stmTransaction
        WHERE tran_category_id_category = tranCategoryIdCategory AND account_id_account = accountId;
    ELSE
        INSERT INTO graph (tran_category_id_category, account_id_account, total_in_graph)
        VALUES (tranCategoryIdCategory, accountId, stmTransaction);
    END IF;

    -- Check if oldTranCatId is different from tranCategoryIdCategory
    IF oldTranCatId != tranCategoryIdCategory THEN
        -- Check if any transaction exists for the given category and account
        IF (SELECT COUNT(*) FROM transaction t JOIN wallet w ON t.wallet_id_wallet = w.id_wallet 
            WHERE w.account_id_account = accountId AND t.tran_category_id_category = oldTranCatId) = 0 THEN
            -- Delete graph record if no transactions exist
            DELETE FROM graph WHERE account_id_account = accountId AND tran_category_id_category = oldTranCatId;
        END IF;
    END IF;
    
	IF goalIdGoal IS NOT NULL THEN
        UPDATE goal
		SET collected_money = collected_money + stmTransaction
		WHERE id_goal = goalIdGoal;
        
		UPDATE goal
		SET status_goal = 1
		WHERE id_goal = goalIdGoal AND collected_money < total_goal;
        
		UPDATE goal
		SET status_goal = 2
		WHERE id_goal = goalIdGoal AND collected_money >= total_goal;
	END IF;
    
	IF debtIdDebt IS NOT NULL THEN
        UPDATE debt
		SET debt_paid = debt_paid + stmTransaction,
			latest_pay_date = updateTransactionOn
		WHERE id_debt = debtIdDebt;
        
		UPDATE debt
		SET status_debt = 1
		WHERE id_debt = debtIdDebt AND debt_paid < total_debt;
    
		UPDATE debt
		SET status_debt = 2
		WHERE id_debt = debtIdDebt AND debt_paid >= total_debt;
	END IF;
    
END //

DELIMITER ;

-- view latested 3 transaction
DELIMITER //
CREATE PROCEDURE viewTransactionByAccountIdLimitThree(in accountId int)
BEGIN
	SELECT t.*
FROM transaction t
JOIN wallet w ON t.wallet_id_wallet = w.id_wallet
WHERE w.account_id_account = accountId
ORDER BY t.create_transaction_on DESC
LIMIT 3;
END //
DELIMITER ;

-- view today income
DELIMITER //

CREATE PROCEDURE viewTodayIncome(
    IN accountId INT, 
    IN walletId INT, 
    OUT todayIncome DECIMAL(10, 2)
)
BEGIN
    DECLARE today DATE;
    SET today = CURDATE();

    SELECT IFNULL(SUM(t.stm_transaction), 0) INTO todayIncome
    FROM transaction t
    JOIN wallet w ON t.wallet_id_wallet = w.id_wallet
    WHERE w.account_id_account = accountId
        AND w.id_wallet = walletId
        AND DATE(t.date_transaction) = today
        AND t.statement_type = 1; -- Assuming 1 is the code for 'income';
END //

DELIMITER ;

-- view today expense
DELIMITER //

CREATE PROCEDURE viewTodayExpense(
    IN accountId INT, 
    IN walletId INT, 
    OUT todayExpense DECIMAL(10, 2)
)
BEGIN
    DECLARE today DATE;
    SET today = CURDATE();

    SELECT IFNULL(SUM(t.stm_transaction), 0) INTO todayExpense
    FROM transaction t
    JOIN wallet w ON t.wallet_id_wallet = w.id_wallet
    WHERE w.account_id_account = accountId
        AND w.id_wallet = walletId
        AND DATE(t.date_transaction) = today
        AND t.statement_type = 2; -- Assuming 2 is the code for 'expense';
END //

DELIMITER ;

-- view today income and expense
DELIMITER //

CREATE PROCEDURE viewTodayIncomeAndExpense(
    IN accountId INT, 
    IN walletId INT, 
    OUT todayIncome DECIMAL(10, 2), 
    OUT todayExpense DECIMAL(10, 2)
)
BEGIN
    -- Call viewTodayIncome procedure and store the result in OUT parameter
    CALL viewTodayIncome(accountId, walletId, todayIncome);

    -- Call viewTodayExpense procedure and store the result in OUT parameter
    CALL viewTodayExpense(accountId, walletId, todayExpense);
END //

DELIMITER ;

-- view transaction category by transaction category
DELIMITER //
CREATE PROCEDURE `viewTransactionCategoryByTranCat`( 
    IN tranCatType INT 
)
BEGIN
  SELECT * FROM transaction_category
  WHERE type_category = tranCatType 
  AND id_transaction_category NOT IN (32, 33);
END //
DELIMITER ;


-- account  
-- create account guest by use imei
DELIMITER //

CREATE  PROCEDURE `createAccountByImei`(IN InImei VARCHAR(200))
BEGIN
    DECLARE countAccounts INT;

    SELECT COUNT(*) INTO countAccounts FROM account WHERE imei = InImei AND account_role = 1;

    IF countAccounts >= 1 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'account not register becuase account same imei and account role';
    ELSE
        INSERT INTO account (imei, email, account_role)
        VALUES ( InImei, null, DEFAULT);
    END IF;
    SET countAccounts = 0;
END //
DELIMITER ;

-- create account member by Google account
DELIMITER //
CREATE  PROCEDURE `createAccountByGoogle`( IN InImei VARCHAR(200) , in InEmail VARCHAR(50))
BEGIN
    DECLARE countAccounts INT;

    SELECT COUNT(*) INTO countAccounts FROM account WHERE email = InEmail AND account_role = 2;

    IF countAccounts >= 1 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'account not register becuase account same imei and account role';
    ELSE
        INSERT INTO account (imei, email, account_role)
        VALUES (InImei, InEmail, 2);
    END IF;
    SET countAccounts = 0;
END //
DELIMITER ;

-- GOAL ---------------------------------------------------------------------------
-- view goal
DELIMITER //
CREATE PROCEDURE `viewGoalByAccountId`( 
    IN InAccountId INT 
)
BEGIN
    DECLARE currentDate DATE;
    SET currentDate = CURDATE();

--     UPDATE goal
--     SET status_goal = 3
--     WHERE account_id_account = InAccountId 
--     AND status_goal != 2
--     AND end_date_goal < currentDate;

    SELECT * FROM goal WHERE account_id_account = InAccountId;
END //
DELIMITER ;

-- view goal status in progress
DELIMITER //
CREATE PROCEDURE `viewGoalStatusInProgress`( 
    IN InAccountId INT 
)
BEGIN

    SELECT * FROM goal WHERE account_id_account = InAccountId and status_goal = 1;
END //
DELIMITER ;

-- view goal status success
DELIMITER //
CREATE PROCEDURE `viewGoalStatusSuccess`( 
    IN InAccountId INT 
)
BEGIN

    SELECT * FROM goal WHERE account_id_account = InAccountId and status_goal = 2;
END //
DELIMITER ;

-- create goal
DELIMITER //
CREATE PROCEDURE `createGoalByAccountId`(
    IN InNameGoal VARCHAR(45),
    IN InAmountGoal DECIMAL(13,2),
    IN Incollected_money DECIMAL(13,2),
    IN InEndDateGoal DATETIME,
    IN InAccountId INT
)
BEGIN
    DECLARE new_goal_id INT;

    -- Step 1: Insert new goal
    INSERT INTO `plutocart`.`goal` (`name_goal`, `total_goal`, `collected_money`, `end_date_goal`, `account_id_account`, `create_goal_on`, `update_goal_on`)
    VALUES (InNameGoal, InAmountGoal, Incollected_money, InEndDateGoal, InAccountId, NOW(), NOW());

    -- Step 2: Get the ID of the newly inserted goal
    SET new_goal_id = LAST_INSERT_ID();

    -- Step 3: Update the status_goal based on the condition
    UPDATE `plutocart`.`goal`
    SET `status_goal` = 2
    WHERE `id_goal` = new_goal_id AND `collected_money` >= `total_goal`;

END //

DELIMITER ;

-- update goal
DELIMITER //
CREATE  PROCEDURE `updateGoalByGoalId`( 
in InNameGoal VARCHAR(15) ,
in InAmountGoal  decimal(10 , 2) ,
in Incollected_money decimal(10,2)  ,
in InEndDateGoal dateTime ,
in InGoalId int
-- in amountOfTransaction decimal(10,2) 
)
BEGIN

 UPDATE goal
		SET 
			name_goal = InNameGoal,
			total_goal= InAmountGoal,
--             collected_money = Incollected_money + amountOfTransaction,
            collected_money = Incollected_money,
            end_date_goal = InEndDateGoal,
            update_goal_on = now()
		WHERE id_goal = InGoalId;
        
	UPDATE goal
    SET status_goal = 1
    WHERE id_goal = InGoalId AND collected_money < total_goal;
    UPDATE goal
    SET status_goal = 2
    WHERE id_goal = InGoalId AND collected_money >= total_goal;
        
END //
DELIMITER ;

-- update goal to complete 
DELIMITER //
CREATE  PROCEDURE `updateGoalToComplete`( 
in InAccountId int,
in InGoalId int
)
BEGIN

 UPDATE goal
		SET status_goal = 2
		WHERE id_goal = InGoalId AND account_id_account = InAccountId;
        
END //
DELIMITER ;

-- DEBT ---------------------------------------------------------------------------
-- view debt status in progress
DELIMITER //
CREATE PROCEDURE `viewDebtStatusInProgress`( 
    IN InAccountId INT 
)
BEGIN

    SELECT * FROM debt WHERE account_id_account = InAccountId and status_debt = 1;
END //
DELIMITER ;

-- view debt status success
DELIMITER //
CREATE PROCEDURE `viewDebtStatusSuccess`( 
    IN InAccountId INT 
)
BEGIN

    SELECT * FROM debt WHERE account_id_account = InAccountId and status_debt = 2;
END //
DELIMITER ;

-- create debt
DELIMITER //
CREATE PROCEDURE createDebtByAccountId(
    IN InNameDebt VARCHAR(45),
    IN InAmountDebt DECIMAL(13,2),
    IN InPayPeriod INT,
    IN InNumOfPaidPeriod INT,
    IN InPaidDebtPerPeriod DECIMAL(13,2),
    IN InTotalPaidDebt DECIMAL(13,2),
    IN InMoneyLender VARCHAR(15),
    IN InLatestPayDate DATETIME,
    IN InAccountId INT
)
BEGIN
    DECLARE new_debt_id INT;

    -- Step 1: Insert new debt
    INSERT INTO debt (name_debt, total_debt, total_period, paid_period, monthly_payment, debt_paid, money_lender, latest_pay_date, create_debt_on, update_debt_on,account_id_account)
    VALUES (InNameDebt, InAmountDebt, InPayPeriod, InNumOfPaidPeriod, InPaidDebtPerPeriod, InTotalPaidDebt, InMoneyLender, InLatestPayDate, NOW(), NOW(), InAccountId);

    -- Step 2: Get the ID of the newly inserted goal
    SET new_debt_id = LAST_INSERT_ID();

    -- Step 3: Update the status_goal based on the condition
    UPDATE debt
    SET status_debt = 2
    WHERE id_debt = new_debt_id AND debt_paid >= total_debt;

END //

DELIMITER ;

-- update debt
DELIMITER //
CREATE PROCEDURE updateDebtByAccountId(
    IN InNameDebt VARCHAR(45),
    IN InAmountDebt DECIMAL(13,2),
    IN InPayPeriod INT,
    IN InNumOfPaidPeriod INT,
    IN InPaidDebtPerPeriod DECIMAL(13,2),
    IN InTotalPaidDebt DECIMAL(13,2),
    IN InMoneyLender VARCHAR(15),
    IN InLatestPayDate DATETIME,
    IN InDebtId INT
)
BEGIN
	
    UPDATE debt
    SET name_debt = InNameDebt,
		total_debt = InAmountDebt,
        total_period = InPayPeriod,
        paid_period = InNumOfPaidPeriod,
        monthly_payment = InPaidDebtPerPeriod,
        debt_paid = InTotalPaidDebt,
        money_lender = InMoneyLender,
        latest_pay_date = InLatestPayDate,
        update_debt_on = now()
    WHERE id_debt = InDebtId;
    
    UPDATE debt
    SET status_debt = 1
    WHERE id_debt = InDebtId AND debt_paid < total_debt;
    
    UPDATE debt
    SET status_debt = 2
    WHERE id_debt = InDebtId AND debt_paid >= total_debt;

END //

DELIMITER ;

-- update debt to complete 
DELIMITER //
CREATE  PROCEDURE `updateDebtToComplete`( 
in InAccountId int,
in InDebtId int
)
BEGIN

 UPDATE debt
		SET status_debt = 2
		WHERE id_debt = InDebtId AND account_id_account = InAccountId;
        
END //
DELIMITER ;

-- update account from guest to member
DELIMITER //
CREATE  PROCEDURE `updateAccountToMember`( IN InEmail VARCHAR(50) , in InAccountId int)
BEGIN
    DECLARE countAccounts INT;
    DECLARE linkedTablesCount INT;

    -- ตรวจสอบว่าบัญชีเชื่อมโยงกับตารางอื่นหรือไม่
    SELECT COUNT(*) INTO linkedTablesCount
    FROM information_schema.KEY_COLUMN_USAGE
    WHERE TABLE_NAME IN ('wallet', 'transaction', 'debt', 'goal')
    AND CONSTRAINT_SCHEMA = 'plutocart' -- แทนที่ด้วยชื่อของฐานข้อมูลของคุณ
    AND COLUMN_NAME = 'id_account'
    AND REFERENCED_TABLE_NAME = 'account';

    IF linkedTablesCount > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ไม่สามารถอัพเดตบัญชีเป็นสมาชิกได้ เนื่องจากมีการเชื่อมโยงกับตารางอื่น';
    ELSE
        -- ตรวจสอบว่ามีบัญชีอื่นที่ใช้อีเมลเดียวกันและเป็นสมาชิกอยู่แล้วหรือไม่
        SELECT COUNT(*) INTO countAccounts
        FROM account
        WHERE email = InEmail AND account_role = 2;

        IF countAccounts >= 1 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ไม่สามารถอัพเดตบัญชีเป็นสมาชิกได้ เนื่องจากอีเมล์นี้ได้ลงทะเบียนแล้ว';
        ELSE
            UPDATE account
            SET email = InEmail, account_role = 2
            WHERE id_account = InAccountId AND account_role != 2;
        END IF;
    END IF;

    SET countAccounts = 0;
END //
DELIMITER ;

-- delete account  
DELIMITER //

CREATE PROCEDURE `deleteAccount`(IN InAccountId INT)
BEGIN
  -- Delete transactions associated with goals and debts
  DELETE transaction
  FROM transaction
  JOIN wallet ON transaction.wallet_id_wallet = wallet.id_wallet
  JOIN account ON wallet.account_id_account = account.id_account
  LEFT JOIN goal ON transaction.goal_id_goal = goal.id_goal
  LEFT JOIN debt ON transaction.debt_id_debt = debt.id_debt
  WHERE account.id_account = InAccountId;

  -- Delete goals associated with the account
  DELETE FROM goal WHERE account_id_account = InAccountId;

  -- Delete debts associated with the account
  DELETE FROM debt WHERE account_id_account = InAccountId;

  -- Delete transactions associated with wallets of the account
  DELETE transaction
  FROM transaction
  JOIN wallet ON transaction.wallet_id_wallet = wallet.id_wallet
  WHERE wallet.account_id_account = InAccountId;

  -- Delete wallets associated with the account
  DELETE FROM wallet WHERE account_id_account = InAccountId;

  -- Delete the account
  DELETE FROM account WHERE id_account = InAccountId;
END //

DELIMITER ;


-- view graph

DELIMITER //
CREATE PROCEDURE viewGraphByAccountIdAndStmType(
	IN accountId INT,
    IN stmType INT
)
BEGIN
	select g.* from graph g 
    join transaction_category t on g.tran_category_id_category = t.id_transaction_category
    where g.account_id_account = accountId and t.type_category = stmType;
END//
DELIMITER ;